// Generated by gencpp from file niryo_robot_tools_commander/ToolCommand.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_TOOLS_COMMANDER_MESSAGE_TOOLCOMMAND_H
#define NIRYO_ROBOT_TOOLS_COMMANDER_MESSAGE_TOOLCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_tools_commander
{
template <class ContainerAllocator>
struct ToolCommand_
{
  typedef ToolCommand_<ContainerAllocator> Type;

  ToolCommand_()
    : cmd_type(0)
    , tool_id(0)
    , gripper_close_speed(0)
    , gripper_open_speed(0)
    , activate(false)
    , gpio(0)  {
    }
  ToolCommand_(const ContainerAllocator& _alloc)
    : cmd_type(0)
    , tool_id(0)
    , gripper_close_speed(0)
    , gripper_open_speed(0)
    , activate(false)
    , gpio(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef uint8_t _tool_id_type;
  _tool_id_type tool_id;

   typedef uint16_t _gripper_close_speed_type;
  _gripper_close_speed_type gripper_close_speed;

   typedef uint16_t _gripper_open_speed_type;
  _gripper_open_speed_type gripper_open_speed;

   typedef uint8_t _activate_type;
  _activate_type activate;

   typedef int8_t _gpio_type;
  _gpio_type gpio;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OPEN_GRIPPER)
  #undef OPEN_GRIPPER
#endif
#if defined(_WIN32) && defined(CLOSE_GRIPPER)
  #undef CLOSE_GRIPPER
#endif
#if defined(_WIN32) && defined(PULL_AIR_VACUUM_PUMP)
  #undef PULL_AIR_VACUUM_PUMP
#endif
#if defined(_WIN32) && defined(PUSH_AIR_VACUUM_PUMP)
  #undef PUSH_AIR_VACUUM_PUMP
#endif
#if defined(_WIN32) && defined(SETUP_DIGITAL_IO)
  #undef SETUP_DIGITAL_IO
#endif
#if defined(_WIN32) && defined(ACTIVATE_DIGITAL_IO)
  #undef ACTIVATE_DIGITAL_IO
#endif
#if defined(_WIN32) && defined(DEACTIVATE_DIGITAL_IO)
  #undef DEACTIVATE_DIGITAL_IO
#endif

  enum {
    OPEN_GRIPPER = 1u,
    CLOSE_GRIPPER = 2u,
    PULL_AIR_VACUUM_PUMP = 10u,
    PUSH_AIR_VACUUM_PUMP = 11u,
    SETUP_DIGITAL_IO = 20u,
    ACTIVATE_DIGITAL_IO = 21u,
    DEACTIVATE_DIGITAL_IO = 22u,
  };


  typedef boost::shared_ptr< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ToolCommand_

typedef ::niryo_robot_tools_commander::ToolCommand_<std::allocator<void> > ToolCommand;

typedef boost::shared_ptr< ::niryo_robot_tools_commander::ToolCommand > ToolCommandPtr;
typedef boost::shared_ptr< ::niryo_robot_tools_commander::ToolCommand const> ToolCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator1> & lhs, const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type &&
    lhs.tool_id == rhs.tool_id &&
    lhs.gripper_close_speed == rhs.gripper_close_speed &&
    lhs.gripper_open_speed == rhs.gripper_open_speed &&
    lhs.activate == rhs.activate &&
    lhs.gpio == rhs.gpio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator1> & lhs, const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_tools_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f70245697cb6e31e028474766912a0e";
  }

  static const char* value(const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f70245697cb6e31ULL;
  static const uint64_t static_value2 = 0xe028474766912a0eULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_tools_commander/ToolCommand";
  }

  static const char* value(const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Gripper\n"
"uint8 OPEN_GRIPPER = 1\n"
"uint8 CLOSE_GRIPPER = 2\n"
"\n"
"# Vacuump pump\n"
"uint8 PULL_AIR_VACUUM_PUMP = 10\n"
"uint8 PUSH_AIR_VACUUM_PUMP = 11\n"
"\n"
"# Tools controlled by digital I/Os\n"
"uint8 SETUP_DIGITAL_IO = 20\n"
"uint8 ACTIVATE_DIGITAL_IO = 21\n"
"uint8 DEACTIVATE_DIGITAL_IO = 22\n"
"\n"
"uint8 cmd_type\n"
"\n"
"# Gripper1= 11, Gripper2=12, Gripper3=13, VaccuumPump=31, Electromagnet=30\n"
"uint8 tool_id\n"
"\n"
"# if gripper close\n"
"uint16 gripper_close_speed\n"
"\n"
"# if gripper open\n"
"uint16 gripper_open_speed\n"
"\n"
"# if vacuum pump or electromagnet grove\n"
"bool activate\n"
"\n"
"# if tool is set by digital outputs (electromagnet)\n"
"# if gpio<0 get value in memory\n"
"int8 gpio\n"
;
  }

  static const char* value(const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.tool_id);
      stream.next(m.gripper_close_speed);
      stream.next(m.gripper_open_speed);
      stream.next(m.activate);
      stream.next(m.gpio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToolCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_tools_commander::ToolCommand_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_type);
    s << indent << "tool_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tool_id);
    s << indent << "gripper_close_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gripper_close_speed);
    s << indent << "gripper_open_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gripper_open_speed);
    s << indent << "activate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activate);
    s << indent << "gpio: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gpio);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_TOOLS_COMMANDER_MESSAGE_TOOLCOMMAND_H
