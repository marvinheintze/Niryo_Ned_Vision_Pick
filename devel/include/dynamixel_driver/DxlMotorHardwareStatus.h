// Generated by gencpp from file dynamixel_driver/DxlMotorHardwareStatus.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_DRIVER_MESSAGE_DXLMOTORHARDWARESTATUS_H
#define DYNAMIXEL_DRIVER_MESSAGE_DXLMOTORHARDWARESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_msgs/MotorHeader.h>

namespace dynamixel_driver
{
template <class ContainerAllocator>
struct DxlMotorHardwareStatus_
{
  typedef DxlMotorHardwareStatus_<ContainerAllocator> Type;

  DxlMotorHardwareStatus_()
    : motor_identity()
    , temperature(0)
    , voltage(0.0)
    , error(0)
    , error_msg()  {
    }
  DxlMotorHardwareStatus_(const ContainerAllocator& _alloc)
    : motor_identity(_alloc)
    , temperature(0)
    , voltage(0.0)
    , error(0)
    , error_msg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::niryo_robot_msgs::MotorHeader_<ContainerAllocator>  _motor_identity_type;
  _motor_identity_type motor_identity;

   typedef uint32_t _temperature_type;
  _temperature_type temperature;

   typedef double _voltage_type;
  _voltage_type voltage;

   typedef uint32_t _error_type;
  _error_type error;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _error_msg_type;
  _error_msg_type error_msg;





  typedef boost::shared_ptr< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> const> ConstPtr;

}; // struct DxlMotorHardwareStatus_

typedef ::dynamixel_driver::DxlMotorHardwareStatus_<std::allocator<void> > DxlMotorHardwareStatus;

typedef boost::shared_ptr< ::dynamixel_driver::DxlMotorHardwareStatus > DxlMotorHardwareStatusPtr;
typedef boost::shared_ptr< ::dynamixel_driver::DxlMotorHardwareStatus const> DxlMotorHardwareStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator1> & lhs, const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator2> & rhs)
{
  return lhs.motor_identity == rhs.motor_identity &&
    lhs.temperature == rhs.temperature &&
    lhs.voltage == rhs.voltage &&
    lhs.error == rhs.error &&
    lhs.error_msg == rhs.error_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator1> & lhs, const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa4311819f2846ae7b0f01fb11479f2c";
  }

  static const char* value(const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa4311819f2846aeULL;
  static const uint64_t static_value2 = 0x7b0f01fb11479f2cULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_driver/DxlMotorHardwareStatus";
  }

  static const char* value(const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_msgs/MotorHeader motor_identity\n"
"\n"
"uint32 temperature\n"
"float64 voltage\n"
"uint32 error\n"
"string error_msg\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_msgs/MotorHeader\n"
"uint8 motor_id\n"
"\n"
"uint8 motor_type\n"
"uint8 MOTOR_TYPE_STEPPER=1\n"
"uint8 MOTOR_TYPE_XL430=2\n"
"uint8 MOTOR_TYPE_XL320=3\n"
;
  }

  static const char* value(const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_identity);
      stream.next(m.temperature);
      stream.next(m.voltage);
      stream.next(m.error);
      stream.next(m.error_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DxlMotorHardwareStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_driver::DxlMotorHardwareStatus_<ContainerAllocator>& v)
  {
    s << indent << "motor_identity: ";
    s << std::endl;
    Printer< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_identity);
    s << indent << "temperature: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
    s << indent << "error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error);
    s << indent << "error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_DRIVER_MESSAGE_DXLMOTORHARDWARESTATUS_H
