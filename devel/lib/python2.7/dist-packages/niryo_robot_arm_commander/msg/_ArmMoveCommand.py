# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_arm_commander/ArmMoveCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import niryo_robot_arm_commander.msg
import niryo_robot_msgs.msg

class ArmMoveCommand(genpy.Message):
  _md5sum = "eb4533fa1ec0414d1b50ff9449077984"
  _type = "niryo_robot_arm_commander/ArmMoveCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 JOINTS = 0            # uses joints 
int32 POSE = 1              # uses position and rpy 
int32 POSITION = 2          # uses position
int32 RPY = 3               # uses rpy
int32 POSE_QUAT = 4         # uses position and orientation
int32 LINEAR_POSE = 5       # uses position and rpy
int32 SHIFT_POSE = 6        # uses shift
int32 SHIFT_LINEAR_POSE = 7 # uses shift
int32 EXECUTE_TRAJ = 8      # uses dist_smoothing, list_poses
int32 DRAW_SPIRAL = 9      

int32 cmd_type

float64[] joints
geometry_msgs/Point position
niryo_robot_msgs/RPY rpy
geometry_msgs/Quaternion orientation
niryo_robot_arm_commander/ShiftPose shift

geometry_msgs/Pose[] list_poses
float32 dist_smoothing

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: niryo_robot_msgs/RPY
# roll, pitch and yaw

float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: niryo_robot_arm_commander/ShiftPose
int32 axis_number
float64 value

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation
"""
  # Pseudo-constants
  JOINTS = 0
  POSE = 1
  POSITION = 2
  RPY = 3
  POSE_QUAT = 4
  LINEAR_POSE = 5
  SHIFT_POSE = 6
  SHIFT_LINEAR_POSE = 7
  EXECUTE_TRAJ = 8
  DRAW_SPIRAL = 9

  __slots__ = ['cmd_type','joints','position','rpy','orientation','shift','list_poses','dist_smoothing']
  _slot_types = ['int32','float64[]','geometry_msgs/Point','niryo_robot_msgs/RPY','geometry_msgs/Quaternion','niryo_robot_arm_commander/ShiftPose','geometry_msgs/Pose[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_type,joints,position,rpy,orientation,shift,list_poses,dist_smoothing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmMoveCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_type is None:
        self.cmd_type = 0
      if self.joints is None:
        self.joints = []
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.rpy is None:
        self.rpy = niryo_robot_msgs.msg.RPY()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.shift is None:
        self.shift = niryo_robot_arm_commander.msg.ShiftPose()
      if self.list_poses is None:
        self.list_poses = []
      if self.dist_smoothing is None:
        self.dist_smoothing = 0.
    else:
      self.cmd_type = 0
      self.joints = []
      self.position = geometry_msgs.msg.Point()
      self.rpy = niryo_robot_msgs.msg.RPY()
      self.orientation = geometry_msgs.msg.Quaternion()
      self.shift = niryo_robot_arm_commander.msg.ShiftPose()
      self.list_poses = []
      self.dist_smoothing = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cmd_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joints))
      _x = self
      buff.write(_get_struct_10did().pack(_x.position.x, _x.position.y, _x.position.z, _x.rpy.roll, _x.rpy.pitch, _x.rpy.yaw, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.shift.axis_number, _x.shift.value))
      length = len(self.list_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.list_poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.dist_smoothing
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.rpy is None:
        self.rpy = niryo_robot_msgs.msg.RPY()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.shift is None:
        self.shift = niryo_robot_arm_commander.msg.ShiftPose()
      if self.list_poses is None:
        self.list_poses = None
      end = 0
      start = end
      end += 4
      (self.cmd_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joints = s.unpack(str[start:end])
      _x = self
      start = end
      end += 92
      (_x.position.x, _x.position.y, _x.position.z, _x.rpy.roll, _x.rpy.pitch, _x.rpy.yaw, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.shift.axis_number, _x.shift.value,) = _get_struct_10did().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.list_poses.append(val1)
      start = end
      end += 4
      (self.dist_smoothing,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cmd_type
      buff.write(_get_struct_i().pack(_x))
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joints.tostring())
      _x = self
      buff.write(_get_struct_10did().pack(_x.position.x, _x.position.y, _x.position.z, _x.rpy.roll, _x.rpy.pitch, _x.rpy.yaw, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.shift.axis_number, _x.shift.value))
      length = len(self.list_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.list_poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self.dist_smoothing
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.rpy is None:
        self.rpy = niryo_robot_msgs.msg.RPY()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.shift is None:
        self.shift = niryo_robot_arm_commander.msg.ShiftPose()
      if self.list_poses is None:
        self.list_poses = None
      end = 0
      start = end
      end += 4
      (self.cmd_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joints = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 92
      (_x.position.x, _x.position.y, _x.position.z, _x.rpy.roll, _x.rpy.pitch, _x.rpy.yaw, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.shift.axis_number, _x.shift.value,) = _get_struct_10did().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.list_poses.append(val1)
      start = end
      end += 4
      (self.dist_smoothing,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10did = None
def _get_struct_10did():
    global _struct_10did
    if _struct_10did is None:
        _struct_10did = struct.Struct("<10did")
    return _struct_10did
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
