// Auto-generated. Do not edit!

// (in-package niryo_robot_tools_commander.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ToolCommand = require('./ToolCommand.js');

//-----------------------------------------------------------

class ToolGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.cmd = null;
    }
    else {
      if (initObj.hasOwnProperty('cmd')) {
        this.cmd = initObj.cmd
      }
      else {
        this.cmd = new ToolCommand();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ToolGoal
    // Serialize message field [cmd]
    bufferOffset = ToolCommand.serialize(obj.cmd, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ToolGoal
    let len;
    let data = new ToolGoal(null);
    // Deserialize message field [cmd]
    data.cmd = ToolCommand.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'niryo_robot_tools_commander/ToolGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '6a82b00a12ace7515f408f53824d53d8';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # goal
    niryo_robot_tools_commander/ToolCommand cmd
    
    ================================================================================
    MSG: niryo_robot_tools_commander/ToolCommand
    # Gripper
    uint8 OPEN_GRIPPER = 1
    uint8 CLOSE_GRIPPER = 2
    
    # Vacuump pump
    uint8 PULL_AIR_VACUUM_PUMP = 10
    uint8 PUSH_AIR_VACUUM_PUMP = 11
    
    # Tools controlled by digital I/Os
    uint8 SETUP_DIGITAL_IO = 20
    uint8 ACTIVATE_DIGITAL_IO = 21
    uint8 DEACTIVATE_DIGITAL_IO = 22
    
    uint8 cmd_type
    
    # Gripper1= 11, Gripper2=12, Gripper3=13, VaccuumPump=31, Electromagnet=30
    uint8 tool_id
    
    # if gripper close
    uint16 gripper_close_speed
    
    # if gripper open
    uint16 gripper_open_speed
    
    # if vacuum pump or electromagnet grove
    bool activate
    
    # if tool is set by digital outputs (electromagnet)
    # if gpio<0 get value in memory
    int8 gpio
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ToolGoal(null);
    if (msg.cmd !== undefined) {
      resolved.cmd = ToolCommand.Resolve(msg.cmd)
    }
    else {
      resolved.cmd = new ToolCommand()
    }

    return resolved;
    }
};

module.exports = ToolGoal;
